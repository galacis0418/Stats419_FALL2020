########## load data ##########
gutenberg.id = 2591;
path.to.gutenberg = paste0(path.to.nlp,"_data_/gutenberg/");
createDirRecursive(path.to.gutenberg);
path.to.grimm = paste0(path.to.gutenberg,gutenberg.id,"/");
createDirRecursive(path.to.grimm);
local.data.path = path.to.gutenberg; # currently required by grabHTML ... TODO: fix
txt.file.remote = "https://www.gutenberg.org/files/2591/2591-0.txt";
html.file.remote = "https://www.gutenberg.org/files/2591/2591-h/2591-h.htm";
df.grimm = parseGutenberg.GRIMM(path.to.grimm,
file.stem = "fairytales",
txt.file.remote = txt.file.remote,
html.file.remote =html.file.remote,
my.local.path = path.to.gutenberg);
# df.grimm;
########## load stopwords ##########
stop.file.snowball = paste0(path.to.nlp, "stop-templates/snowball.txt");
stop.snowball = trimMe(strsplit( grabHTML(stop.file.snowball), "\r\n")[[1]]);
library(devtools);
library(humanVerseWSU);
path.github = "https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/";
include.me = paste0(path.github, "misc/functions-nlp.R");
# source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-encryption.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-chinese.R");
# source_url( include.me );
path.to.nascent = "C:/Users/Alexander Nevsky/Dropbox/WSU-419/Fall 2020/__student_access__/unit_02_confirmatory_data_analysis/nascent/";
folder.nlp = "nlp/";
path.to.nlp = paste0(path.to.nascent, folder.nlp);
versions = c("bbe","kjv","hb5","hbg");
langs    = c("en-us", "en-gb", "zh-tw", "zh-cn");
# https://en.wikipedia.org/wiki/ISO_639-1
# https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
langK    = c("American English", "English", "Traditional Chinese", "Simplified Chinese");
# we will use the standard codes ...
# dataframe format
# version .. lang .. book.n ... chap.n ... para.n (verse) ... para.text (verse)
path.to.obible = paste0(path.to.nlp, "_data_/chinese/o-bible/");
obible.df = prepareBibleDataFrame(path.to.obible, versions, langs);
library(devtools);
library(humanVerseWSU);
path.github = "https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/";
include.me = paste0(path.github, "misc/functions-nlp.R");
# source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-encryption.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-chinese.R");
# source_url( include.me );
path.to.nascent = "C:/Users/Alexander Nevsky/Dropbox/WSU-419/Fall 2020/__student_access__/unit_02_confirmatory_data_analysis/nascent/";
folder.nlp = "nlp/";
path.to.nlp = paste0(path.to.nascent, folder.nlp);
# https://cran.r-project.org/web/packages/corpus/vignettes/chinese.html
cstops <- "https://raw.githubusercontent.com/ropensci/textworkshop17/master/demos/chineseDemo/ChineseStopWords.txt"
csw <- paste(readLines(cstops, encoding = "UTF-8"), collapse = "\n") # download
csw <- paste(readLines(cstops, encoding = "UTF-8"), collapse = "\n") # download
install.packages('LIWCalike')
install.packages('imdb')
install_github("MonteShaffer/imdb/imdb");
detach(package:imdb);
# library(devtools);
# install_github("MonteShaffer/imdb/imdb"); # choose #3 to humanVerseWSU
# detach(package:imdb);
library(imdb);
packageVersion("imdb");  # ‘0.1.1’
# ?loadDataIMDB
library(devtools);
library(humanVerseWSU);
path.github = "https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/";
include.me = paste0(path.github, "misc/functions-nlp.R");
# source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-encryption.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-chinese.R");
# source_url( include.me );
path.to.nascent = "C:/Users/Alexander Nevsky/Dropbox/WSU-419/Fall 2020/__student_access__/unit_02_confirmatory_data_analysis/nascent/";
folder.nlp = "nlp/";
path.to.nlp = paste0(path.to.nascent, folder.nlp);
versions = c("bbe","kjv","hb5","hbg");
langs    = c("en-us", "en-gb", "zh-tw", "zh-cn");
# https://en.wikipedia.org/wiki/ISO_639-1
# https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
langK    = c("American English", "English", "Traditional Chinese", "Simplified Chinese");
# we will use the standard codes ...
# dataframe format
# version .. lang .. book.n ... chap.n ... para.n (verse) ... para.text (verse)
path.to.obible = paste0(path.to.nlp, "_data_/chinese/o-bible/");
# https://cran.r-project.org/web/packages/corpus/vignettes/chinese.html
cstops <- "https://raw.githubusercontent.com/ropensci/textworkshop17/master/demos/chineseDemo/ChineseStopWords.txt"
csw <- paste(readLines(cstops, encoding = "UTF-8"), collapse = "\n") # download
library(devtools);
local.path = "C:/_git_/WSU_STATS419_FALL2020/";
source( paste0(local.path,"functions/libraries.R"), local=T );
library(devtools);
my.source = 'local';
local.path = "C:/_git_/WSU_STATS419_FALL2020/";
local.data.path = "R:/WSU_STATS419_FALL2020/";
source( paste0(local.path,"functions/libraries.R"), local=T );
# I am now setting parameters in YAML header, look above
knitr::opts_chunk$set(echo = params$knitChunkSetEcho);
knitr::opts_chunk$set(warning = params$knitChunkSetWarning);
knitr::opts_chunk$set(message = params$knitChunkSetMessage);
# ... just added ... take a look at how this builds ... you now have your raw files ...
knitr::opts_chunk$set(cache = params$knitChunkSetCache);
knitr::opts_chunk$set(fig.path = params$knitChunkSetFigPath);
# knitr::opts_chunk$set(background = "#981E32"); # only works on *.Rnw
# fig.show ... animate ...
# CRIMSON ... #981E32
# GRAY ... #53565A
## this should knit, but I am running some IMDB stuff
## so I wasn't able to verify a final Knit.
## please let me know in the Discussion Board if you
## find any errors, and I will fix
# we don't want scientific notation
options(scipen  = 999);
library(devtools);
library(humanVerseWSU);
packageVersion("humanVerseWSU");  # ‘0.1.4’+
path.github = "https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/";
library(parallel);
parallel::detectCores(); # 16 # Technically, this is threads, I have an 8-core processor
# cache.rebuild ... This will prevent Xs from being used from previous cache ...
library(mvnfast);
source_url( paste0(path.github, "humanVerseWSU/R/functions-maths.R") );   # deg2rad
# zeroIsh
set.seed(1222015);
mu = c(1,3); # centers for x,y
Sigma = diag(c(2,23)); # variance for x,y
nsim = 9000;
X = rmvn(nsim, mu, Sigma, ncores=2);  # this is parallelizability with cores
# ncores	... Number of cores used. The parallelization will take place only if OpenMP is supported.
xy.lim = c(min(X), max(X)); # square
print("################   X   ################");
print(paste0("MEANS:    x = ",round(mean(X[,1]),3),
"       y = ",round(mean(X[,2]),3) ));
print(paste0("VARIANCE: x = ",round(var(X[,1]),3),
"       y = ",round(var(X[,2]),3) ));
plot(X, pch=20, cex=0.25, main="X",
xlim=xy.lim, ylim=xy.lim );
abline(v=mean(X[,1]), col="red");
abline(h=mean(X[,2]), col="red");
points(x=mean(X[,1]),y=mean(X[,2]),
pch=21, col="red", cex=8);
Xs = scale(X);
print("################   Xs   ################");
print(paste0("MEANS:    x = ",round(mean(Xs[,1]),3),
"       y = ",round(mean(Xs[,2]),3) ));
print(paste0("VARIANCE: x = ",round(var(Xs[,1]),3),
"       y = ",round(var(Xs[,2]),3) ));
plot(Xs, pch=20, cex=0.25, main="Xs",
xlim=xy.lim, ylim=xy.lim );
abline(v=mean(Xs[,1]), col="blue");
abline(h=mean(Xs[,2]), col="blue");
points(x=mean(Xs[,1]),y=mean(Xs[,2]),
pch=21, col="blue", cex=8);
plot(Xs, pch=20, cex=0.25, main="Xs");
abline(v=mean(Xs[,1]), col="green");
abline(h=mean(Xs[,2]), col="green");
points(x=mean(Xs[,1]),y=mean(Xs[,2]),
pch=21, col="green", cex=8);
x = X[,1];
y = X[,2];
XR = X; # let's manually rotate 60 ...
XR[,1] = x * cos(deg2rad(60)) - y * sin(deg2rad(60));
XR[,2] = x * sin(deg2rad(60)) + y * cos(deg2rad(60));
xyr.lim = c(min(XR),max(XR));
print("################   XR   ################");
print(paste0("MEANS:    x = ",round(mean(XR[,1]),3),
"       y = ",round(mean(XR[,2]),3) ));
print(paste0("VARIANCE: x = ",round(var(XR[,1]),3),
"       y = ",round(var(XR[,2]),3) ));
plot(XR, pch=20, cex=0.25, main="XR",
xlim=xyr.lim, ylim=xyr.lim );
abline(v=mean(XR[,1]), col="red");
abline(h=mean(XR[,2]), col="red");
points(x=mean(XR[,1]),y=mean(XR[,2]),
pch=21, col="red", cex=8);
XRs = scale(XR);
print("################   XRs   ################");
print(paste0("MEANS:    x = ",round(mean(XRs[,1]),3),
"       y = ",round(mean(XRs[,2]),3) ));
print(paste0("VARIANCE: x = ",round(var(XRs[,1]),3),
"       y = ",round(var(XRs[,2]),3) ));
plot(XRs, pch=20, cex=0.25, main="XRs",
xlim=xyr.lim, ylim=xyr.lim );
abline(v=mean(XRs[,1]), col="blue");
abline(h=mean(XRs[,2]), col="blue");
points(x=mean(XRs[,1]),y=mean(XRs[,2]),
pch=21, col="blue", cex=8);
plot(XRs, pch=20, cex=0.25, main="XRs");
abline(v=mean(XRs[,1]), col="green");
abline(h=mean(XRs[,2]), col="green");
points(x=mean(XRs[,1]),y=mean(XRs[,2]),
pch=21, col="green", cex=8);
# non-rotated form of doing it :: https://statisticsglobe.com/plot-in-r-example
plot(Xs, pch=20, cex=0.25, main="Xs");
abline(v=mean(Xs[,1]), col="green");
abline(h=mean(Xs[,2]), col="green");
points(x=mean(Xs[,1]),y=mean(Xs[,2]),
pch=21, col="green", cex=8);
Xs.PCA = princomp(Xs);
summary(Xs.PCA);
str(Xs.PCA);
Xs.PCA.scores = Xs.PCA$scores;
plot(Xs.PCA.scores, pch=20, cex=0.25, main="Xs");
abline(v=mean(Xs.PCA.scores[,1]), col="orange");
abline(h=mean(Xs.PCA.scores[,2]), col="orange");
points(x=mean(Xs.PCA.scores[,1]),y=mean(Xs.PCA.scores[,2]),
pch=21, col="orange", cex=8);
# Xs.PCA
# XR[,1] = x * cos(deg2rad(60)) - y * sin(deg2rad(60));
plot(XRs, pch=20, cex=0.25, main="XRs");
abline(v=mean(XRs[,1]), col="green");
abline(h=mean(XRs[,2]), col="green");
points(x=mean(XRs[,1]),y=mean(XRs[,2]),
pch=21, col="green", cex=8);
XRs.PCA = princomp(XRs);
summary(XRs.PCA);
str(XRs.PCA);
summary(XRs.PCA);
str(Xs.PCA);
XRs.PCA.scores = XRs.PCA$scores;
plot(XRs.PCA.scores, pch=20, cex=0.25, main="XRs");
abline(v=mean(XRs.PCA.scores[,1]), col="orange");
abline(h=mean(XRs.PCA.scores[,2]), col="orange");
points(x=mean(XRs.PCA.scores[,1]),y=mean(XRs.PCA.scores[,2]),
pch=21, col="orange", cex=8);
# cache.rebuild ... This will prevent Xs from being used from previous cache ...
library(scatterplot3d);
library(rgl);
set.seed(1222015);
mu = c(1,3,8); # centers for x,y
Sigma = diag(c(2,23,13)); # variance for x,y
X = rmvn(nsim, mu, Sigma, ncores=2);  # this is parallelizability with cores
xyz.lim = c(min(X), max(X)); # square
print("################   X   ################");
print(paste0("MEANS:    x = ",round(mean(X[,1]),3),
"       y = ",round(mean(X[,2]),3),
"       z = ",round(mean(X[,3]),3)));
print(paste0("VARIANCE: x = ",round(var(X[,1]),3),
"       y = ",round(var(X[,2]),3),
"       z = ",round(var(X[,3]),3)));
scatterplot3d(X, xlim=xyz.lim, ylim=xyz.lim, zlim=xyz.lim, highlight.3d=FALSE, main="X - 3D Scatterplot", color="red" );
# this is interactive, and will open in its own window
plot3d(X, xlim=xyz.lim, ylim=xyz.lim, zlim=xyz.lim, main="X - 3D plot",col="red" );
graphics::plot( as.data.frame(X) );
Xs = scale(X);
print("################   Xs   ################");
print(paste0("MEANS:    x = ",round(mean(Xs[,1]),3),
"       y = ",round(mean(Xs[,2]),3),
"       z = ",round(mean(Xs[,3]),3)));
print(paste0("VARIANCE: x = ",round(var(Xs[,1]),3),
"       y = ",round(var(Xs[,2]),3),
"       z = ",round(var(Xs[,3]),3)));
scatterplot3d(Xs, xlim=xyz.lim, ylim=xyz.lim, zlim=xyz.lim, highlight.3d=FALSE, main="Xs - 3D Scatterplot", color="blue" );
# this is interactive, and will open in its own window
plot3d(Xs, xlim=xyz.lim, ylim=xyz.lim, zlim=xyz.lim, main="Xs - 3D plot",col="blue" );
graphics::plot( as.data.frame(Xs) );
XR = X; # let's manually rotate 60 ...
x = X[,1];
y = X[,2];
z = X[,3];
# rotate around z-axis by angle phi
# https://stackoverflow.com/questions/20759214/
r = sqrt(x*x + y*y);
theta = atan(y/x);
phi = deg2rad(60);
# (r * cos(theta + phi), r * sin(theta + phi))
XR[,1] = r * cos(theta + phi);  # x
XR[,1] = r * sin(theta + phi);  # y
xyzr.lim = c(min(XR),max(XR));
print("################   XR   ################");
print(paste0("MEANS:    x = ",round(mean(XR[,1]),3),
"       y = ",round(mean(XR[,2]),3),
"       z = ",round(mean(XR[,3]),3)));
print(paste0("VARIANCE: x = ",round(var(XR[,1]),3),
"       y = ",round(var(XR[,2]),3),
"       z = ",round(var(XR[,3]),3)));
scatterplot3d(XR, xlim=xyzr.lim, ylim=xyzr.lim, zlim=xyzr.lim, highlight.3d=FALSE, main="XR - 3D Scatterplot", color="green");
# this is interactive, and will open in its own window
plot3d(XR, xlim=xyzr.lim, ylim=xyzr.lim, zlim=xyzr.lim, main="XR - 3D plot", col="green");
graphics::plot( as.data.frame(XR) );
XRs = scale(XR);
print("################   XRs   ################");
print(paste0("MEANS:    x = ",round(mean(XRs[,1]),3),
"       y = ",round(mean(XRs[,2]),3),
"       z = ",round(mean(XRs[,3]),3)));
print(paste0("VARIANCE: x = ",round(var(XRs[,1]),3),
"       y = ",round(var(XRs[,2]),3),
"       z = ",round(var(XRs[,3]),3)));
scatterplot3d(XRs, xlim=xyzr.lim, ylim=xyzr.lim, zlim=xyzr.lim, highlight.3d=FALSE, main="XR - 3D Scatterplot", color="orange");
# this is interactive, and will open in its own window
plot3d(XRs, xlim=xyzr.lim, ylim=xyzr.lim, zlim=xyzr.lim, main="XR - 3D plot", col="orange");
graphics::plot( as.data.frame(XRs) );
scatterplot3d(Xs, highlight.3d=FALSE, main="Xs - 3D Scatterplot", color="green" );
Xs.PCA = princomp(Xs);
summary(Xs.PCA);
str(Xs.PCA);
Xs.PCA.scores = Xs.PCA$scores;
scatterplot3d(Xs.PCA.scores, highlight.3d=FALSE, main="Xs - 3D Scatterplot", color="purple" );
scatterplot3d(XRs, highlight.3d=FALSE, main="XRs - 3D Scatterplot", color="green" );
XRs.PCA = princomp(XRs);
summary(XRs.PCA);
str(XRs.PCA);
XRs.PCA.scores = XRs.PCA$scores;
scatterplot3d(XRs.PCA.scores, highlight.3d=FALSE, main="XRs - 3D Scatterplot", color="purple" );
## DROPBOX ... __student_access__ ...
## You need to change this ...
path.dataset = "C:/Users/Alexander Nevsky/Dropbox/WSU-419/Fall 2020/__student_access__/sample_latex_files/Multivariate-2009/datasets/";
file.running = paste0(path.dataset,"RECORDS.csv");
myData = read.csv(file.running,header=FALSE);
## DROPBOX ... __student_access__ ...
## You need to change this ...
path.dataset = "C:/Users/Galac/Desktop/git419/Stats419_FALL2020/datasets/Multivariate-2009/datasets";
file.running = paste0(path.dataset,"RECORDS.csv");
myData = read.csv(file.running,header=FALSE);
## DROPBOX ... __student_access__ ...
## You need to change this ...
path.dataset = "C:/Users/Galac/Desktop/git419/Stats419_FALL2020/datasets/Multivariate-2009/datasets";
file.running = paste0(path.dataset,"RECORDS.csv");
myData = read.csv(file.running,header=FALSE);
## DROPBOX ... __student_access__ ...
## You need to change this ...
path.dataset = "C:/Users/Galac/Desktop/git419/Stats419_FALL2020/datasets/Multivariate-2009/datasets/";
file.running = paste0(path.dataset,"RECORDS.csv");
myData = read.csv(file.running,header=FALSE);
colnames(myData)=c("Country","100m","200m","400m",
"800m","1500m","5000m",
"10000m","marathon");
myData;
X = (myData[,-1]);
Xs = scale(X);
rownames(X) = rownames(Xs) = myData[,1]; # We still have the country names, important when we get to biplot
# Xs;
performKMOTest(Xs);
performBartlettSphericityTest(Xs);
this.path = path.to.nascent;
setwd(this.path);
actorRank.modernEra = readRDS("actorRank2000.rds");
library(devtools);
library(humanVerseWSU);
path.github = "https://raw.githubusercontent.com/MonteShaffer/humanVerseWSU/master/";
include.me = paste0(path.github, "misc/functions-nlp.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-str.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-stack.R");
source_url( include.me );
include.me = paste0(path.github, "misc/functions-nlp-pos.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-encryption.R");
source_url( include.me );
path.to.nascent = "C:/Users/Alexander Nevsky/Dropbox/WSU-419/Fall 2020/__student_access__/unit_02_confirmatory_data_analysis/nascent/";
folder.nlp = "nlp/";
path.to.nlp = paste0(path.to.nascent, folder.nlp);
###### UPDATES TO dataframe subset function ######
# inflation adjustments for NA ... and improvements on subsetting
include.me = paste0(path.github, "humanVerseWSU/R/functions-dataframe.R");
source_url( include.me );
include.me = paste0(path.github, "humanVerseWSU/R/functions-inflation.R");
source_url( include.me );
knitr::opts_chunk$set(echo = TRUE);
knitr::opts_chunk$set(warning = FALSE);
knitr::opts_chunk$set(message = FALSE);
## this should knit, but I am running some IMDB stuff
## so I wasn't able to verify a final Knit.
## please let me know in the Discussion Board if you
## find any errors, and I will fix
packageVersion("humanVerseWSU");  # ‘0.1.4’  [SHOULD BE THIS]
packageVersion("imdb");
library(humanVerseWSU);
# You need R tools for this to work:  https://cran.r-project.org/bin/windows/Rtools/
# You may want to see if you have the latest version...
# library(devtools);
# detach(package:humanVerseWSU);
# install_github("MonteShaffer/humanVerseWSU/humanVerseWSU");
# Choose (3) None to minimize headaches ....
# library(humanVerseWSU);
path.to.week7 = "C:/_git_/WSU_STATS419_FALL2020/WEEK-07/";
path.graphics = paste0(path.to.week7,"graphics/");
createDirRecursive(path.graphics);
example.datasets.path = "C:/Users/Alexander Nevsky/Dropbox/WSU-419/Fall 2020/__student_access__/sample_latex_files/Multivariate-2009/datasets/";
protein.file2 = paste0(example.datasets.path,"pipe-format/protein.txt");
protein = read.csv(protein.file2, header=TRUE, quote="", sep="|");
packageVersion("humanVerseWSU");  # ‘0.1.4’  [SHOULD BE THIS]
packageVersion("imdb");
library(humanVerseWSU);
# You need R tools for this to work:  https://cran.r-project.org/bin/windows/Rtools/
# You may want to see if you have the latest version...
# library(devtools);
# detach(package:humanVerseWSU);
# install_github("MonteShaffer/humanVerseWSU/humanVerseWSU");
# Choose (3) None to minimize headaches ....
# library(humanVerseWSU);
path.to.week7 = "C:/_git_/WSU_STATS419_FALL2020/WEEK-07/";
path.graphics = paste0(path.to.week7,"graphics/");
createDirRecursive(path.graphics);
example.datasets.path = "C:/Users/Alexander Nevsky/Dropbox/WSU-419/Fall 2020/__student_access__/sample_latex_files/Multivariate-2009/datasets/";
protein.file2 = paste0(example.datasets.path,"pipe-format/protein.txt");
protein = read.csv(protein.file2, header=TRUE, quote="", sep="|");
packageVersion("humanVerseWSU");  # ‘0.1.4’  [SHOULD BE THIS]
packageVersion("imdb");
library(humanVerseWSU);
# You need R tools for this to work:  https://cran.r-project.org/bin/windows/Rtools/
# You may want to see if you have the latest version...
# library(devtools);
# detach(package:humanVerseWSU);
# install_github("MonteShaffer/humanVerseWSU/humanVerseWSU");
# Choose (3) None to minimize headaches ....
# library(humanVerseWSU);
path.to.week7 = "C:/_git_/WSU_STATS419_FALL2020/WEEK-07/";
path.graphics = paste0(path.to.week7,"graphics/");
createDirRecursive(path.graphics);
example.datasets.path = "";
protein.file2 = paste0(example.datasets.path,"pipe-format/protein.txt");
protein = read.csv(protein.file2, header=TRUE, quote="", sep="|");
packageVersion("humanVerseWSU");  # ‘0.1.4’  [SHOULD BE THIS]
packageVersion("imdb");
library(humanVerseWSU);
# You need R tools for this to work:  https://cran.r-project.org/bin/windows/Rtools/
# You may want to see if you have the latest version...
# library(devtools);
# detach(package:humanVerseWSU);
# install_github("MonteShaffer/humanVerseWSU/humanVerseWSU");
# Choose (3) None to minimize headaches ....
# library(humanVerseWSU);
path.to.week7 = "C:/_git_/WSU_STATS419_FALL2020/WEEK-07/";
path.graphics = paste0(path.to.week7,"graphics/");
createDirRecursive(path.graphics);
example.datasets.path = "";
protein.file2 = paste0(example.datasets.path,"pipe-format/protein.txt");
protein = read.csv(protein.file2, header=TRUE, quote="", sep="|");
packageVersion("humanVerseWSU");  # ‘0.1.4’  [SHOULD BE THIS]
packageVersion("imdb");
library(humanVerseWSU);
# You need R tools for this to work:  https://cran.r-project.org/bin/windows/Rtools/
# You may want to see if you have the latest version...
# library(devtools);
# detach(package:humanVerseWSU);
# install_github("MonteShaffer/humanVerseWSU/humanVerseWSU");
# Choose (3) None to minimize headaches ....
# library(humanVerseWSU);
path.to.week7 = "C:/_git_/WSU_STATS419_FALL2020/WEEK-07/";
path.graphics = paste0(path.to.week7,"graphics/");
createDirRecursive(path.graphics);
example.datasets.path = "C:/Users/Galac/Desktop/git419/Stats419_FALL2020/datasets/Multivariate-2009/datasets/";
protein.file2 = paste0(example.datasets.path,"pipe-format/protein.txt");
protein = read.csv(protein.file2, header=TRUE, quote="", sep="|");
protein;
cols = colnames(protein);
rows = protein$Country;
df = removeColumnsFromDataFrame(protein,"Country");
df.t = transposeMatrix(df);
colnames(df.t) = rows;
protein.t = as.data.frame(df.t);
protein.t;
library(devtools);
local.path = "C:/Users/Galac/Desktop/git419/Stats419_FALL2020/functions/";
source( paste0(local.path,"functions/libraries.R"), local=T );
library(devtools);
local.path = "C:/Users/Galac/Desktop/git419/Stats419_FALL2020/";
source( paste0(local.path,"functions/libraries.R"), local=T );
install.packages('tractor.base')
library(devtools);
local.path = "C:/Users/Galac/Desktop/git419/Stats419_FALL2020/";
source( paste0(local.path,"functions/libraries.R"), local=T );
source( paste0(local.path,"functions/functions-imdb.R"), local=T );
library(devtools);
my.source = 'local';
local.path = "C:/Users/Galac/Desktop/git419/Stats419_FALL2020/datasets/Multivariate-2009/datasets/";
local.data.path = "R:/WSU_STATS419_FALL2020/";
source( paste0(local.path,"functions/libraries.R"), local=T );
library(devtools);
my.source = 'local';
local.path = "C:/Users/Galac/Desktop/git419/Stats419_FALL2020/datasets/Multivariate-2009/datasets/";
local.data.path = "R:/WSU_STATS419_FALL2020/";
source( paste0(local.path,"functions/libraries.R"), local=T );
knitr::opts_chunk$set(echo = TRUE);
knitr::opts_chunk$set(warning = FALSE);
knitr::opts_chunk$set(message = FALSE);
# this is something you would never want public normally
# it is a sandbox, so let's give it a whirl ...
db.host   = Sys.getenv("WSU_SANDBOX_HOST");
db.name   = Sys.getenv("WSU_SANDBOX_DATABASE");
db.user   = Sys.getenv("WSU_SANDBOX_USER");
db.passwd = Sys.getenv("WSU_SANDBOX_PASSWD");
# tidyverse has a SQL syntax structure, but RMySQL follows SQL syntax a bit.
## This is set from the command console ... the one line of code is in the dropbox called "db
library(RMySQL); # install.packages("RMySQL", dependencies=TRUE);
mysql.connection = dbConnect(RMySQL::MySQL(),
user = db.user,
password = db.passwd,
dbname = db.name ,
host = db.host);
# this is something you would never want public normally
# it is a sandbox, so let's give it a whirl ...
Sys.setenv(WSU_SANDBOX_HOST = "md5.mshaffer.com");
Sys.setenv(WSU_SANDBOX_DATABASE = "wsu_sandbox_db");
Sys.setenv(WSU_SANDBOX_USER = "wsu_sandox_user");
Sys.setenv(WSU_SANDBOX_PASSWD = "!WSUCougars");
# tidyverse has a SQL syntax structure, but RMySQL follows SQL syntax a bit.
## This is set from the command console ... the one line of code is in the dropbox called "db
library(RMySQL); # install.packages("RMySQL", dependencies=TRUE);
mysql.connection = dbConnect(RMySQL::MySQL(),
user = db.user,
password = db.passwd,
dbname = db.name ,
host = db.host);
install.packages("RMySQL", dependencies=TRUE);
install.packages("RMySQL", dependencies = TRUE)
install.packages("RMySQL", dependencies = TRUE)
install.packages("RMySQL", dependencies = TRUE)
